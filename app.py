from flask import Flask, request, render_template, redirect, url_for
import json
import os

app = Flask(__name__)
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Load vulnerabilities database
def load_vulnerabilities(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return json.load(file)

# Scan a single file for vulnerabilities
def scan_file(file_path, vulnerabilities):
    found_vulnerabilities = []
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
    except UnicodeDecodeError:
        with open(file_path, 'r', encoding='latin-1') as file:
            content = file.read()
    
    for vulnerability in vulnerabilities:
        if vulnerability['signature'] in content:
            found_vulnerabilities.append(vulnerability)
    return found_vulnerabilities

# Prioritize vulnerabilities based on severity
def prioritize_vulnerabilities(vulnerabilities):
    return sorted(vulnerabilities, key=lambda x: x['severity'], reverse=True)

# Route for the home page
@app.route('/')
def index():
    return render_template('index.html')

# Route to handle file upload and scanning
@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return redirect(request.url)
    
    file = request.files['file']
    if file.filename == '':
        return redirect(request.url)
    
    if file:
        file_path = os.path.join(UPLOAD_FOLDER, file.filename)
        file.save(file_path)
        
        vulnerabilities_file = 'vulnerabilities.json'
        vulnerabilities = load_vulnerabilities(vulnerabilities_file)
        found_vulnerabilities = scan_file(file_path, vulnerabilities)
        prioritized_vulnerabilities = prioritize_vulnerabilities(found_vulnerabilities)
        
        return render_template('results.html', vulnerabilities=prioritized_vulnerabilities)

# Run the app
if __name__ == '__main__':
    app.run(debug=True)
